type Account implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  accountId: String!
  totalContributed: BigInt!
  contributions: [Contribution!]!
}

type AccountConnection {
  totalCount: Int!
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
}

input AccountCreateInput {
  accountId: String!
  totalContributed: String!
}

type AccountEdge {
  node: Account!
  cursor: String!
}

enum AccountOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  accountId_ASC
  accountId_DESC
  totalContributed_ASC
  totalContributed_DESC
}

input AccountUpdateInput {
  accountId: String
  totalContributed: String
}

input AccountWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  accountId_eq: String
  accountId_contains: String
  accountId_startsWith: String
  accountId_endsWith: String
  accountId_in: [String!]
  totalContributed_eq: BigInt
  totalContributed_gt: BigInt
  totalContributed_gte: BigInt
  totalContributed_lt: BigInt
  totalContributed_lte: BigInt
  totalContributed_in: [BigInt!]
  contributions_none: ContributionWhereInput
  contributions_some: ContributionWhereInput
  contributions_every: ContributionWhereInput
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
}

input AccountWhereUniqueInput {
  id: ID!
}

interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

type Bid implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  parachain: Parachain!
  parachainId: String!
  balance: BigInt!
  leasePeriodStart: BigInt!
  leasePeriodEnd: BigInt!
}

type BidConnection {
  totalCount: Int!
  edges: [BidEdge!]!
  pageInfo: PageInfo!
}

input BidCreateInput {
  parachain: ID!
  balance: String!
  leasePeriodStart: String!
  leasePeriodEnd: String!
}

type BidEdge {
  node: Bid!
  cursor: String!
}

enum BidOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  parachain_ASC
  parachain_DESC
  balance_ASC
  balance_DESC
  leasePeriodStart_ASC
  leasePeriodStart_DESC
  leasePeriodEnd_ASC
  leasePeriodEnd_DESC
}

input BidUpdateInput {
  parachain: ID
  balance: String
  leasePeriodStart: String
  leasePeriodEnd: String
}

input BidWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  balance_eq: BigInt
  balance_gt: BigInt
  balance_gte: BigInt
  balance_lt: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  leasePeriodStart_eq: BigInt
  leasePeriodStart_gt: BigInt
  leasePeriodStart_gte: BigInt
  leasePeriodStart_lt: BigInt
  leasePeriodStart_lte: BigInt
  leasePeriodStart_in: [BigInt!]
  leasePeriodEnd_eq: BigInt
  leasePeriodEnd_gt: BigInt
  leasePeriodEnd_gte: BigInt
  leasePeriodEnd_lt: BigInt
  leasePeriodEnd_lte: BigInt
  leasePeriodEnd_in: [BigInt!]
  parachain: ParachainWhereInput
  AND: [BidWhereInput!]
  OR: [BidWhereInput!]
}

input BidWhereUniqueInput {
  id: ID!
}

"""GraphQL representation of BigInt"""
scalar BigInt

type Chronicle implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  lastProcessedBlock: BigInt!
  mostRecentAuctionStart: BigInt
  mostRecentAuctionClosingStart: BigInt
}

type ChronicleConnection {
  totalCount: Int!
  edges: [ChronicleEdge!]!
  pageInfo: PageInfo!
}

input ChronicleCreateInput {
  lastProcessedBlock: String!
  mostRecentAuctionStart: String
  mostRecentAuctionClosingStart: String
}

type ChronicleEdge {
  node: Chronicle!
  cursor: String!
}

enum ChronicleOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  lastProcessedBlock_ASC
  lastProcessedBlock_DESC
  mostRecentAuctionStart_ASC
  mostRecentAuctionStart_DESC
  mostRecentAuctionClosingStart_ASC
  mostRecentAuctionClosingStart_DESC
}

input ChronicleUpdateInput {
  lastProcessedBlock: String
  mostRecentAuctionStart: String
  mostRecentAuctionClosingStart: String
}

input ChronicleWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  lastProcessedBlock_eq: BigInt
  lastProcessedBlock_gt: BigInt
  lastProcessedBlock_gte: BigInt
  lastProcessedBlock_lt: BigInt
  lastProcessedBlock_lte: BigInt
  lastProcessedBlock_in: [BigInt!]
  mostRecentAuctionStart_eq: BigInt
  mostRecentAuctionStart_gt: BigInt
  mostRecentAuctionStart_gte: BigInt
  mostRecentAuctionStart_lt: BigInt
  mostRecentAuctionStart_lte: BigInt
  mostRecentAuctionStart_in: [BigInt!]
  mostRecentAuctionClosingStart_eq: BigInt
  mostRecentAuctionClosingStart_gt: BigInt
  mostRecentAuctionClosingStart_gte: BigInt
  mostRecentAuctionClosingStart_lt: BigInt
  mostRecentAuctionClosingStart_lte: BigInt
  mostRecentAuctionClosingStart_in: [BigInt!]
  AND: [ChronicleWhereInput!]
  OR: [ChronicleWhereInput!]
}

input ChronicleWhereUniqueInput {
  id: ID!
}

type Contribution implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  crowdloan: Crowdloan!
  crowdloanId: String!
  account: Account!
  accountId: String!
  balance: BigInt!
  blockHeight: BigInt!
}

type ContributionConnection {
  totalCount: Int!
  edges: [ContributionEdge!]!
  pageInfo: PageInfo!
}

input ContributionCreateInput {
  crowdloan: ID!
  account: ID!
  balance: String!
  blockHeight: String!
}

type ContributionEdge {
  node: Contribution!
  cursor: String!
}

enum ContributionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  crowdloan_ASC
  crowdloan_DESC
  account_ASC
  account_DESC
  balance_ASC
  balance_DESC
  blockHeight_ASC
  blockHeight_DESC
}

input ContributionUpdateInput {
  crowdloan: ID
  account: ID
  balance: String
  blockHeight: String
}

input ContributionWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  balance_eq: BigInt
  balance_gt: BigInt
  balance_gte: BigInt
  balance_lt: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  blockHeight_eq: BigInt
  blockHeight_gt: BigInt
  blockHeight_gte: BigInt
  blockHeight_lt: BigInt
  blockHeight_lte: BigInt
  blockHeight_in: [BigInt!]
  crowdloan: CrowdloanWhereInput
  account: AccountWhereInput
  AND: [ContributionWhereInput!]
  OR: [ContributionWhereInput!]
}

input ContributionWhereUniqueInput {
  id: ID!
}

type Crowdloan implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  parachain: Parachain!
  parachainId: String!
  raised: BigInt!
  contributions: [Contribution!]!
}

type CrowdloanConnection {
  totalCount: Int!
  edges: [CrowdloanEdge!]!
  pageInfo: PageInfo!
}

input CrowdloanCreateInput {
  parachain: ID!
  raised: String!
}

type CrowdloanEdge {
  node: Crowdloan!
  cursor: String!
}

enum CrowdloanOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  parachain_ASC
  parachain_DESC
  raised_ASC
  raised_DESC
}

input CrowdloanUpdateInput {
  parachain: ID
  raised: String
}

input CrowdloanWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  raised_eq: BigInt
  raised_gt: BigInt
  raised_gte: BigInt
  raised_lt: BigInt
  raised_lte: BigInt
  raised_in: [BigInt!]
  parachain: ParachainWhereInput
  contributions_none: ContributionWhereInput
  contributions_some: ContributionWhereInput
  contributions_every: ContributionWhereInput
  AND: [CrowdloanWhereInput!]
  OR: [CrowdloanWhereInput!]
}

input CrowdloanWhereUniqueInput {
  id: ID!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type Hello {
  greeting: String!
}

type HistoricalIncentive implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  blockHeight: BigInt!
  leadPercentageRate: BigInt!
  siblingParachain: Parachain
  siblingParachainId: String
}

type HistoricalIncentiveConnection {
  totalCount: Int!
  edges: [HistoricalIncentiveEdge!]!
  pageInfo: PageInfo!
}

input HistoricalIncentiveCreateInput {
  blockHeight: String!
  leadPercentageRate: String!
  siblingParachain: ID
}

type HistoricalIncentiveEdge {
  node: HistoricalIncentive!
  cursor: String!
}

enum HistoricalIncentiveOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  blockHeight_ASC
  blockHeight_DESC
  leadPercentageRate_ASC
  leadPercentageRate_DESC
  siblingParachain_ASC
  siblingParachain_DESC
}

input HistoricalIncentiveUpdateInput {
  blockHeight: String
  leadPercentageRate: String
  siblingParachain: ID
}

input HistoricalIncentiveWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  blockHeight_eq: BigInt
  blockHeight_gt: BigInt
  blockHeight_gte: BigInt
  blockHeight_lt: BigInt
  blockHeight_lte: BigInt
  blockHeight_in: [BigInt!]
  leadPercentageRate_eq: BigInt
  leadPercentageRate_gt: BigInt
  leadPercentageRate_gte: BigInt
  leadPercentageRate_lt: BigInt
  leadPercentageRate_lte: BigInt
  leadPercentageRate_in: [BigInt!]
  siblingParachain: ParachainWhereInput
  AND: [HistoricalIncentiveWhereInput!]
  OR: [HistoricalIncentiveWhereInput!]
}

input HistoricalIncentiveWhereUniqueInput {
  id: ID!
}

type HistoricalParachainFundsPledged implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  parachain: Parachain!
  parachainId: String!
  blockHeight: BigInt!
  fundsPledged: BigInt!
}

type HistoricalParachainFundsPledgedConnection {
  totalCount: Int!
  edges: [HistoricalParachainFundsPledgedEdge!]!
  pageInfo: PageInfo!
}

input HistoricalParachainFundsPledgedCreateInput {
  parachain: ID!
  blockHeight: String!
  fundsPledged: String!
}

type HistoricalParachainFundsPledgedEdge {
  node: HistoricalParachainFundsPledged!
  cursor: String!
}

enum HistoricalParachainFundsPledgedOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  parachain_ASC
  parachain_DESC
  blockHeight_ASC
  blockHeight_DESC
  fundsPledged_ASC
  fundsPledged_DESC
}

input HistoricalParachainFundsPledgedUpdateInput {
  parachain: ID
  blockHeight: String
  fundsPledged: String
}

input HistoricalParachainFundsPledgedWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  blockHeight_eq: BigInt
  blockHeight_gt: BigInt
  blockHeight_gte: BigInt
  blockHeight_lt: BigInt
  blockHeight_lte: BigInt
  blockHeight_in: [BigInt!]
  fundsPledged_eq: BigInt
  fundsPledged_gt: BigInt
  fundsPledged_gte: BigInt
  fundsPledged_lt: BigInt
  fundsPledged_lte: BigInt
  fundsPledged_in: [BigInt!]
  parachain: ParachainWhereInput
  AND: [HistoricalParachainFundsPledgedWhereInput!]
  OR: [HistoricalParachainFundsPledgedWhereInput!]
}

input HistoricalParachainFundsPledgedWhereUniqueInput {
  id: ID!
}

type Incentive implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  blockHeight: BigInt!
  leadPercentageRate: BigInt!
  siblingParachain: Parachain
  siblingParachainId: String
  totalContributionWeight: BigInt!
}

type IncentiveConnection {
  totalCount: Int!
  edges: [IncentiveEdge!]!
  pageInfo: PageInfo!
}

input IncentiveCreateInput {
  blockHeight: String!
  leadPercentageRate: String!
  siblingParachain: ID
  totalContributionWeight: String!
}

type IncentiveEdge {
  node: Incentive!
  cursor: String!
}

enum IncentiveOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  blockHeight_ASC
  blockHeight_DESC
  leadPercentageRate_ASC
  leadPercentageRate_DESC
  siblingParachain_ASC
  siblingParachain_DESC
  totalContributionWeight_ASC
  totalContributionWeight_DESC
}

input IncentiveUpdateInput {
  blockHeight: String
  leadPercentageRate: String
  siblingParachain: ID
  totalContributionWeight: String
}

input IncentiveWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  blockHeight_eq: BigInt
  blockHeight_gt: BigInt
  blockHeight_gte: BigInt
  blockHeight_lt: BigInt
  blockHeight_lte: BigInt
  blockHeight_in: [BigInt!]
  leadPercentageRate_eq: BigInt
  leadPercentageRate_gt: BigInt
  leadPercentageRate_gte: BigInt
  leadPercentageRate_lt: BigInt
  leadPercentageRate_lte: BigInt
  leadPercentageRate_in: [BigInt!]
  totalContributionWeight_eq: BigInt
  totalContributionWeight_gt: BigInt
  totalContributionWeight_gte: BigInt
  totalContributionWeight_lt: BigInt
  totalContributionWeight_lte: BigInt
  totalContributionWeight_in: [BigInt!]
  siblingParachain: ParachainWhereInput
  AND: [IncentiveWhereInput!]
  OR: [IncentiveWhereInput!]
}

input IncentiveWhereUniqueInput {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Parachain implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  paraId: String!
  fundsPledged: BigInt!
  hasWonAnAuction: Boolean!
  historicalFundsPledged: [HistoricalParachainFundsPledged!]!
  bidparachain: [Bid!]
  crowdloanparachain: [Crowdloan!]
  historicalincentivesiblingParachain: [HistoricalIncentive!]
  incentivesiblingParachain: [Incentive!]
}

type ParachainConnection {
  totalCount: Int!
  edges: [ParachainEdge!]!
  pageInfo: PageInfo!
}

input ParachainCreateInput {
  paraId: String!
  fundsPledged: String!
  hasWonAnAuction: Boolean!
}

type ParachainEdge {
  node: Parachain!
  cursor: String!
}

enum ParachainOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  paraId_ASC
  paraId_DESC
  fundsPledged_ASC
  fundsPledged_DESC
  hasWonAnAuction_ASC
  hasWonAnAuction_DESC
}

input ParachainUpdateInput {
  paraId: String
  fundsPledged: String
  hasWonAnAuction: Boolean
}

input ParachainWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  paraId_eq: String
  paraId_contains: String
  paraId_startsWith: String
  paraId_endsWith: String
  paraId_in: [String!]
  fundsPledged_eq: BigInt
  fundsPledged_gt: BigInt
  fundsPledged_gte: BigInt
  fundsPledged_lt: BigInt
  fundsPledged_lte: BigInt
  fundsPledged_in: [BigInt!]
  hasWonAnAuction_eq: Boolean
  hasWonAnAuction_in: [Boolean!]
  historicalFundsPledged_none: HistoricalParachainFundsPledgedWhereInput
  historicalFundsPledged_some: HistoricalParachainFundsPledgedWhereInput
  historicalFundsPledged_every: HistoricalParachainFundsPledgedWhereInput
  bidparachain_none: BidWhereInput
  bidparachain_some: BidWhereInput
  bidparachain_every: BidWhereInput
  crowdloanparachain_none: CrowdloanWhereInput
  crowdloanparachain_some: CrowdloanWhereInput
  crowdloanparachain_every: CrowdloanWhereInput
  historicalincentivesiblingParachain_none: HistoricalIncentiveWhereInput
  historicalincentivesiblingParachain_some: HistoricalIncentiveWhereInput
  historicalincentivesiblingParachain_every: HistoricalIncentiveWhereInput
  incentivesiblingParachain_none: IncentiveWhereInput
  incentivesiblingParachain_some: IncentiveWhereInput
  incentivesiblingParachain_every: IncentiveWhereInput
  AND: [ParachainWhereInput!]
  OR: [ParachainWhereInput!]
}

input ParachainWhereUniqueInput {
  id: ID!
}

type ProcessorState {
  lastCompleteBlock: Float!
  lastProcessedEvent: String!
  indexerHead: Float!
  chainHead: Float!
}

type Query {
  accounts(offset: Int, limit: Int = 50, where: AccountWhereInput, orderBy: [AccountOrderByInput!]): [Account!]!
  accountByUniqueInput(where: AccountWhereUniqueInput!): Account
  accountsConnection(first: Int, after: String, last: Int, before: String, where: AccountWhereInput, orderBy: [AccountOrderByInput!]): AccountConnection!
  bids(offset: Int, limit: Int = 50, where: BidWhereInput, orderBy: [BidOrderByInput!]): [Bid!]!
  bidByUniqueInput(where: BidWhereUniqueInput!): Bid
  bidsConnection(first: Int, after: String, last: Int, before: String, where: BidWhereInput, orderBy: [BidOrderByInput!]): BidConnection!
  chronicles(offset: Int, limit: Int = 50, where: ChronicleWhereInput, orderBy: [ChronicleOrderByInput!]): [Chronicle!]!
  chronicleByUniqueInput(where: ChronicleWhereUniqueInput!): Chronicle
  chroniclesConnection(first: Int, after: String, last: Int, before: String, where: ChronicleWhereInput, orderBy: [ChronicleOrderByInput!]): ChronicleConnection!
  contributions(offset: Int, limit: Int = 50, where: ContributionWhereInput, orderBy: [ContributionOrderByInput!]): [Contribution!]!
  contributionByUniqueInput(where: ContributionWhereUniqueInput!): Contribution
  contributionsConnection(first: Int, after: String, last: Int, before: String, where: ContributionWhereInput, orderBy: [ContributionOrderByInput!]): ContributionConnection!
  crowdloans(offset: Int, limit: Int = 50, where: CrowdloanWhereInput, orderBy: [CrowdloanOrderByInput!]): [Crowdloan!]!
  crowdloanByUniqueInput(where: CrowdloanWhereUniqueInput!): Crowdloan
  crowdloansConnection(first: Int, after: String, last: Int, before: String, where: CrowdloanWhereInput, orderBy: [CrowdloanOrderByInput!]): CrowdloanConnection!
  historicalIncentives(offset: Int, limit: Int = 50, where: HistoricalIncentiveWhereInput, orderBy: [HistoricalIncentiveOrderByInput!]): [HistoricalIncentive!]!
  historicalIncentiveByUniqueInput(where: HistoricalIncentiveWhereUniqueInput!): HistoricalIncentive
  historicalIncentivesConnection(first: Int, after: String, last: Int, before: String, where: HistoricalIncentiveWhereInput, orderBy: [HistoricalIncentiveOrderByInput!]): HistoricalIncentiveConnection!
  historicalParachainFundsPledgeds(offset: Int, limit: Int = 50, where: HistoricalParachainFundsPledgedWhereInput, orderBy: [HistoricalParachainFundsPledgedOrderByInput!]): [HistoricalParachainFundsPledged!]!
  historicalParachainFundsPledgedByUniqueInput(where: HistoricalParachainFundsPledgedWhereUniqueInput!): HistoricalParachainFundsPledged
  historicalParachainFundsPledgedsConnection(first: Int, after: String, last: Int, before: String, where: HistoricalParachainFundsPledgedWhereInput, orderBy: [HistoricalParachainFundsPledgedOrderByInput!]): HistoricalParachainFundsPledgedConnection!
  incentives(offset: Int, limit: Int = 50, where: IncentiveWhereInput, orderBy: [IncentiveOrderByInput!]): [Incentive!]!
  incentiveByUniqueInput(where: IncentiveWhereUniqueInput!): Incentive
  incentivesConnection(first: Int, after: String, last: Int, before: String, where: IncentiveWhereInput, orderBy: [IncentiveOrderByInput!]): IncentiveConnection!
  parachains(offset: Int, limit: Int = 50, where: ParachainWhereInput, orderBy: [ParachainOrderByInput!]): [Parachain!]!
  parachainByUniqueInput(where: ParachainWhereUniqueInput!): Parachain
  parachainsConnection(first: Int, after: String, last: Int, before: String, where: ParachainWhereInput, orderBy: [ParachainOrderByInput!]): ParachainConnection!
  hello: Hello!
}

type StandardDeleteResponse {
  id: ID!
}

type Subscription {
  stateSubscription: ProcessorState!
}
