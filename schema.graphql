type Crowdloan @entity {
  # Since a single paraId can have only a single crowdloan at a time,
  # we're using the paraId as the ID for the crowdloan. We're not interested
  # in historical Crowdloan data
  "Parachain paraId"
  id: ID!,
  parachain: Parachain!,
  raised: BigInt!
  contributions: [Contribution!]! @derivedFrom(field: "crowdloan")
}

type Contribution @entity {
  id: ID!,
  crowdloan: Crowdloan!
  account: Account!,
  balance: BigInt!,
  # We need to know the contribution blockHeight to subsequently
  # determine what the incentives were at that time
  blockHeight: BigInt!,
}

type Account @entity {
  "Account accountId"
  id: ID!,
  accountId: String!,
  # Contributions made by the account in the current lifecycle of the indexer
  contributions: [Contribution!]! @derivedFrom(field: "account")
}

type Parachain @entity {
  "Parachain paraId"
  id: ID!,
  paraId: String!
  fundsPledged: BigInt!,
  hasWonAnAuction: Boolean!,
  historicalFundsPledged: [HistoricalParachainFundsPledged!]! @derivedFrom(field: "parachain")
}

type HistoricalParachainFundsPledged @entity {
  id: ID!,
  parachain: Parachain!,
  blockHeight: BigInt!,
  fundsPledged: BigInt!,
}

type Bid @entity {
  id: ID!,
  parachain: Parachain!,
  balance: BigInt!,
  leasePeriodStart: BigInt!,
  leasePeriodEnd: BigInt!
}

# type Chronicle @entity {
#   id: ID!,
#   mostRecentAuctionStart: BigInt!
# }